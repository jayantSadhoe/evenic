-- Tabel: aut_privileges
CREATE TABLE aut_privileges (
    pve_id                  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    pve_name                VARCHAR2(100) NOT NULL,
    pve_apex_page           NUMBER,
    pve_apex_component_name VARCHAR2(255),
    pve_read                VARCHAR2(1) DEFAULT 'N' NOT NULL,
    pve_write               VARCHAR2(1) DEFAULT 'N' NOT NULL,
    pve_created_date        DATE NOT NULL,
    pve_created_by          VARCHAR2(50) NOT NULL,
    pve_modified_date       DATE,
    pve_modified_by         VARCHAR2(50),
    PRIMARY KEY (pve_id),
    CONSTRAINT aut_pve_uk1 UNIQUE (pve_name),
    CONSTRAINT aut_pve_uk2 UNIQUE (pve_name, pve_apex_page, pve_apex_component_name)
);

-- Tabel: aut_roles
CREATE TABLE aut_roles (
    rle_id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    rle_name          VARCHAR2(50) NOT NULL,
    rle_description   VARCHAR2(200),
    rle_created_date  DATE NOT NULL,
    rle_created_by    VARCHAR2(50) NOT NULL,
    rle_modified_date DATE,
    rle_modified_by   VARCHAR2(50),
    PRIMARY KEY (rle_id),
    CONSTRAINT aut_rle_uk1 UNIQUE (rle_name)
);

-- Tabel: aut_users
CREATE TABLE aut_users (
    usr_id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    usr_username      VARCHAR2(50) NOT NULL,
    usr_password      VARCHAR2(256),
    usr_email         VARCHAR2(100),
    usr_created_date  DATE DEFAULT SYSDATE NOT NULL,
    usr_created_by    VARCHAR2(50) NOT NULL,
    usr_modified_date DATE,
    usr_modified_by   VARCHAR2(50),
    usr_deleted       VARCHAR2(1 CHAR) DEFAULT 'N' NOT NULL,
    PRIMARY KEY (usr_id),
    CONSTRAINT aut_usr_uk1 UNIQUE (usr_username),
    CONSTRAINT aut_usr_uk2 UNIQUE (usr_email)
);

-- Tabel: aut_rle_pve (koppeling tussen rollen en privileges)
CREATE TABLE aut_rle_pve (
    rpe_id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    rpe_rle_id        NUMBER NOT NULL,
    rpe_pve_id        NUMBER NOT NULL,
    rpe_valid_from    DATE DEFAULT SYSDATE NOT NULL,
    rpe_valid_until   DATE,
    rpe_created_date  DATE DEFAULT SYSDATE NOT NULL,
    rpe_created_by    VARCHAR2(50) NOT NULL,
    rpe_modified_date DATE,
    rpe_modified_by   VARCHAR2(50),
    PRIMARY KEY (rpe_id),
    CONSTRAINT aut_rpe_rle_fk FOREIGN KEY (rpe_rle_id) REFERENCES aut_roles (rle_id),
    CONSTRAINT aut_rpe_pve_fk FOREIGN KEY (rpe_pve_id) REFERENCES aut_privileges (pve_id),
    CONSTRAINT aut_rpe_uk1 UNIQUE (rpe_rle_id, rpe_pve_id)
);

-- Tabel: aut_usr_rle (koppeling tussen gebruikers en rollen)
CREATE TABLE aut_usr_rle (
    ure_id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    ure_usr_id        NUMBER NOT NULL,
    ure_rle_id        NUMBER NOT NULL,
    ure_valid_from    DATE DEFAULT SYSDATE NOT NULL,
    ure_valid_until   DATE,
    ure_created_date  DATE DEFAULT SYSDATE NOT NULL,
    ure_created_by    VARCHAR2(50) NOT NULL,
    ure_modified_date DATE,
    ure_modified_by   VARCHAR2(50),
    PRIMARY KEY (ure_id),
    CONSTRAINT aut_ure_usr_fk FOREIGN KEY (ure_usr_id) REFERENCES aut_users (usr_id),
    CONSTRAINT aut_ure_rle_fk FOREIGN KEY (ure_rle_id) REFERENCES aut_roles (rle_id),
    CONSTRAINT aut_ure_uk1 UNIQUE (ure_usr_id, ure_rle_id)
);

-- Tabel: enc_event_types
CREATE TABLE ENC_event_types (
    typ_event_type_id   NUMBER PRIMARY KEY,
    typ_event_type_name VARCHAR2(25) UNIQUE NOT NULL
);

-- Tabel: enc_events
CREATE TABLE ENC_events (
    evs_event_id      NUMBER PRIMARY KEY,
    usr_organizer_id  NUMBER NOT NULL,
    evs_title         VARCHAR2(25) NOT NULL,
    typ_event_type_id NUMBER NOT NULL,
    evs_description   VARCHAR2(500),
    evs_location      VARCHAR2(255) NOT NULL,
    evs_event_date    DATE NOT NULL,
    evs_start_time    TIMESTAMP NOT NULL,
    evs_end_time      TIMESTAMP NOT NULL,
    evs_created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usr_organizer_id) REFERENCES aut_users (usr_id),
    FOREIGN KEY (typ_event_type_id) REFERENCES ENC_event_types (typ_event_type_id)
);

-- Tabel: enc_tickets
CREATE TABLE ENC_tickets (
    tks_ticket_id NUMBER PRIMARY KEY,
    tks_name      VARCHAR2(25) UNIQUE NOT NULL,
    evs_event_id  NUMBER NOT NULL,
    tks_currency  VARCHAR2(5) NOT NULL,
    tks_price     NUMBER(8, 2) NOT NULL,
    tks_quantity  NUMBER DEFAULT 0 CHECK (tks_quantity >= 0),
    FOREIGN KEY (evs_event_id) REFERENCES ENC_events (evs_event_id)
);

-- Tabel: enc_registrations
CREATE TABLE ENC_registrations (
    rts_registration_id NUMBER PRIMARY KEY,
    usr_id              NUMBER NOT NULL,
    evs_event_id        NUMBER NOT NULL,
    tks_ticket_id       NUMBER NOT NULL,
    rts_events_status   VARCHAR2(15) CHECK (rts_events_status IN ('Pending', 'Confirmed', 'Cancelled')) NOT NULL,
    rts_registered_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usr_id) REFERENCES aut_users (usr_id) ON DELETE CASCADE,
    FOREIGN KEY (evs_event_id) REFERENCES ENC_events (evs_event_id) ON DELETE CASCADE,
    FOREIGN KEY (tks_ticket_id) REFERENCES ENC_tickets (tks_ticket_id) ON DELETE CASCADE
);

-- Tabel: enc_notifications
CREATE TABLE ENC_notifications (
    nts_notification_id NUMBER PRIMARY KEY,
    usr_id              NUMBER NOT NULL,
    evs_event_id        NUMBER NOT NULL,
    nts_title           VARCHAR2(25) NOT NULL,
    nts_message         VARCHAR2(500) NOT NULL,
    nts_sent_at         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usr_id) REFERENCES aut_users (usr_id) ON DELETE CASCADE,
    FOREIGN KEY (evs_event_id) REFERENCES ENC_events (evs_event_id)
);

-- Tabel: enc_audit_logs
CREATE TABLE ENC_audit_logs (
    evs_log_id  NUMBER PRIMARY KEY,
    usr_id      NUMBER,
    evs_action  VARCHAR2(255) NOT NULL,
    evs_time    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usr_id) REFERENCES aut_users (usr_id)
);
